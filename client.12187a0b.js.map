{"version":3,"sources":["src/Event/EntityChanged.ts","src/Util/Vector3.ts","src/Entities/Entity.ts","src/Components/Component.ts","src/Components/Physical.ts","src/Components/Movable.ts","src/Components/Stats.ts","src/Components/Collidable.ts","src/Components/Drawable.ts","src/Entities/Player.ts","src/Entities/Enemies/Slimes/Slime.ts","src/Event/EntityAdded.ts","src/Event/EntityRemoved.ts","src/Event/EventBus.ts","src/Systems/System.ts","src/Systems/CameraSystem.ts","src/Systems/MovementSystem.ts","src/Systems/DrawSystem.ts","src/Systems/StateSystem.ts","src/Systems/VelocitySystem.ts","src/Systems/HudSystem.ts","src/Entities/Tile.ts","src/Systems/DebugSystem.ts","src/Systems/CunkSystem.ts","src/Systems/PhysicalCollisionSystem.ts","src/Game/Game.ts","index.ts"],"names":[],"mappings":"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","file":"client.12187a0b.js","sourceRoot":"..\\client","sourcesContent":["import { Entity } from '../Entities/Entity';\n\nexport class EntityChanged {\n    public constructor(\n        public readonly entity: Entity\n    ) {}\n}\n","export class Vector3 {\n    constructor(\n        public x: number = 0,\n        public y: number = 0,\n        public z: number = 0\n    ) {}\n\n    public floor(): Vector3 {\n        return new Vector3(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z));\n    }\n\n    // Add two vectors\n    public add(v: Vector3): Vector3 {\n        return new Vector3(this.x + v.x, this.y + v.y, this.z + v.z);\n    }\n\n    // Subtract two vectors\n    public subtract(v: Vector3): Vector3 {\n        return new Vector3(this.x - v.x, this.y - v.y, this.z - v.z);\n    }\n\n    // Multiply vector by a scalar\n    public multiplyScalar(scalar: number): Vector3 {\n        return new Vector3(this.x * scalar, this.y * scalar, this.z * scalar);\n    }\n\n    // Divide vector by a scalar\n    public divideScalar(scalar: number): Vector3 {\n        if (scalar === 0) {\n            throw new Error(\"Division by zero\");\n        }\n        return new Vector3(this.x / scalar, this.y / scalar, this.z / scalar);\n    }\n\n    // Get the length (magnitude) of the vector\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    // Normalize the vector (make its length 1)\n    public normalize(): Vector3 {\n        const len = this.length();\n        if (len === 0) {\n            return new Vector3(0, 0, 0); // Return zero vector for a zero-length vector\n        }\n        return this.divideScalar(len);\n    }\n\n    // Dot product of two vectors\n    public dot(v: Vector3): number {\n        return this.x * v.x + this.y * v.y + this.z * v.z;\n    }\n\n    // Cross product of two vectors\n    public cross(v: Vector3): Vector3 {\n        return new Vector3(\n            this.y * v.z - this.z * v.y,\n            this.z * v.x - this.x * v.z,\n            this.x * v.y - this.y * v.x\n        );\n    }\n\n    // Calculate the distance between two vectors\n    public distanceTo(v: Vector3): number {\n        return Math.sqrt(\n            (this.x - v.x) ** 2 + (this.y - v.y) ** 2 + (this.z - v.z) ** 2\n        );\n    }\n\n    // Calculate the squared distance (more efficient when only comparing distances)\n    public distanceSquared(v: Vector3): number {\n        return (this.x - v.x) ** 2 + (this.y - v.y) ** 2 + (this.z - v.z) ** 2;\n    }\n\n    // Linear interpolation between two vectors\n    public lerp(v: Vector3, t: number): Vector3 {\n        return this.add(v.subtract(this).multiplyScalar(t));\n    }\n\n    // Create a copy of the vector\n    public clone(): Vector3 {\n        return new Vector3(this.x, this.y, this.z);\n    }\n\n    // Check equality of two vectors\n    public equals(v: Vector3): boolean {\n        return this.x === v.x && this.y === v.y && this.z === v.z;\n    }\n\n    // String representation of the vector\n    public toString(): string {\n        return `Vector3(${this.x}, ${this.y}, ${this.z})`;\n    }\n\n    // Zero vector\n    public static zero(): Vector3 {\n        return new Vector3(0, 0, 0);\n    }\n\n    // Unit vector along the X axis\n    public static unitX(): Vector3 {\n        return new Vector3(1, 0, 0);\n    }\n\n    // Unit vector along the Y axis\n    public static unitY(): Vector3 {\n        return new Vector3(0, 1, 0);\n    }\n\n    // Unit vector along the Z axis\n    public static unitZ(): Vector3 {\n        return new Vector3(0, 0, 1);\n    }\n}","import { Component } from '../Components/Component';\nimport { EntityChanged } from '../Event/EntityChanged';\nimport { Game } from '../Game/Game';\nimport { Vector3 } from '../Util/Vector3';\n\nexport type Constructor<T> = new (...args: any[]) => T\n\nexport enum EntityState {\n    IDLING,\n    WALKING,\n    ATTACKING,\n    DYING,\n    AIRBORNE\n}\n\nexport enum EntityDirection {\n    N,\n    E,\n    S,\n    W\n}\n\nexport type SpriteSheetMap = {\n    state: EntityState,\n    direction: EntityDirection,\n    xIndex: number,\n    yIndex: number,\n    steps: number,\n    speed: number,\n}[]\n\nexport class Entity {\n    private readonly components: Component[] = [];\n    public step: number = 0;\n    public timeElapsed: number = 0;  // Time passed since last frame update\n\n    public position: Vector3 = new Vector3(0, 0, 0); // [x, y, z]\n\n    public zIndex: number = 0;\n    public direction: EntityDirection = EntityDirection.S;\n    public state: EntityState = EntityState.IDLING;\n\n    public frameHeight: number = 16;\n    public frameWidth: number = 16;\n    public width: number = 16;\n    public height: number = 16;\n    public image: HTMLImageElement = new Image();\n    public spirteSheetMap: SpriteSheetMap = [];\n\n    public castShadow: boolean = false;\n\n\tgetComponent<T>(type: Constructor<T>): T {\n\t\tfor (const component of this.components) {\n\t\t\tif (component instanceof type) {\n\t\t\t\treturn component\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(\n\t\t\t`Failed to get component type ${type}. Please run hasComponent first!`\n\t\t)\n\t}\n\n    public removeComponent(component: Component): void {\n        const index = this.components.indexOf(component);\n\n        if (index >= 0) {\n            this.components.splice(index, 1);\n            Game.events.emit(new EntityChanged(this));\n        }\n    }\n\n    public addComponent(component: Component): void {\n        this.components.push(component);\n\n        Game.events.emit(new EntityChanged(this));\n    }\n\n    public addComponents(...components: Component[]): void {\n        for (const component of components) {\n            this.addComponent(component);\n        }\n\n        Game.events.emit(new EntityChanged(this));\n    }\n\n    public hasComponent<T extends Component>(type: T): boolean {\n        for (const component of this.components) {\n            // @ts-ignore\n            if (component instanceof type) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public hasComponents<T extends Component>(types: T[]): boolean {\n        for (const type of types) {\n            if (!this.hasComponent(type)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public setState(state: EntityState) {\n        this.state = state;\n\n        if (this.state !== state) {\n            this.step = 0;\n            this.timeElapsed = 0;\n        }\n    }\n\n    public draw(ctx: CanvasRenderingContext2D, dt: number, opacity: number) {        \n        const screenPos = Game.worldPosToScreenPos(this.position);\n        const width = this.width;\n        const height = this.height;\n        \n        // if (this.castShadow) {\n        //     // Floor\n        //     const shadowScreenPos = Game.worldPosToScreenPos(new Vector3(this.position.x, 0, this.position.z));\n\n        //     const shadowX = shadowScreenPos.x;\n        //     const shadowY = shadowScreenPos.y + this.height / 2;\n\n        //     const shadowHeight = (this.height) / 6;\n        //     const shadowWidth = (this.width) / 3;\n\n        //     ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\n        //     ctx.ellipse(shadowX, shadowY, shadowWidth, shadowHeight, Math.PI, 0, 4 * Math.PI);\n        //     ctx.fill();\n        // }\n\n        ctx.imageSmoothingEnabled = false;\n\n        let animationData = this.spirteSheetMap.find((map) => \n            map.state === this.state &&\n            map.direction === this.direction\n        );\n        \n        const xIndex = animationData?.xIndex ?? 0;\n        const yIndex = animationData?.yIndex ?? 0;\n        const steps = animationData?.steps ?? 0;\n        const speed = animationData?.speed ?? 0;\n        \n        // Calculate source X and Y position in the sprite sheet\n        const sourceX = (xIndex + this.step) * this.frameWidth;\n        const sourceY = yIndex * this.frameHeight;\n    \n        // Save the current transformation matrix\n        ctx.save();    \n\n        ctx.globalAlpha = opacity;\n\n        // Draw the specific frame from the sprite sheet\n        ctx.drawImage(\n            this.image,\n            sourceX,\n            sourceY,  \n            this.frameWidth,\n            this.frameHeight,\n            screenPos.x - this.width / 2,\n            screenPos.y - this.height / 2,\n            width,\n            height\n        );\n        \n        ctx.restore();\n        \n        // Accumulate the time elapsed\n        this.timeElapsed += dt;\n    \n        // Calculate the duration of each frame in the animation\n        const frameDuration = speed / steps;  // Total time for the whole animation divided by the number of steps\n    \n        if (this.timeElapsed >= frameDuration) {\n            this.step++;\n            this.timeElapsed = 0;  // Reset time for the next frame\n        }\n    \n        if (this.step >= steps) {\n            this.step = xIndex;  // Reset step for looping animations\n        }\n    } \n}\n","export class Component {\n}\n","import { Vector3 } from '../Util/Vector3';\nimport { Component } from './Component';\n\nexport class Physical extends Component {\n    public constructor(\n        public velocity: Vector3 = new Vector3(0, 0, 0),\n        public acceleration: number = 1,\n        public mass: number = 1\n    ) {\n        super();\n    }\n}\n","import { Vector3 } from '../Util/Vector3';\nimport { Component } from './Component';\n\nexport class Movable extends Component {\n    public patrollingTo: [number, number, number] | null = null;\n    // public waitTime = 0;\n    // public jumping = false;\n\n    public constructor(\n        public velocity: Vector3 = new Vector3(0, 0, 0),\n        public patrolling: boolean = false,\n        public patrollingSettings?: {\n            originalPosition: [number, number, number],\n            radius: number\n        }\n        // public randomMovements: boolean = false,\n        // public randomMovementSettings: {\n        //     originalPosition: [number, number, number],\n        //     radius: number,\n        //     waitDuration: number,\n        //     moveLength: number\n        // } = {\n        //     originalPosition: [0, 0, 0],\n        //     radius: 10,\n        //     waitDuration: 5,\n        //     moveLength: 5\n        // }\n    ) {\n        super();\n    }\n}\n","import { Component } from './Component';\n\nexport class Stats extends Component {\n    public constructor(\n        public health = {\n            max: 100,\n            current: 150,\n            regen: 1\n        },\n\n        public mana = {\n            max: 100,\n            current: 100,\n            regen: 1\n        },\n\n        public stamina = {\n            max: 100,\n            current: 1000000,\n            regen: 1\n        },\n\n        public speed = {\n            max: 100,\n            current: 100,\n            regen: 1\n        }\n    ) {\n        super();\n    }\n}\n","import { Entity } from '../Entities/Entity';\nimport { Vector3 } from '../Util/Vector3';\nimport { Component } from './Component';\n\nexport interface IntersectArea {\n    minX: number,\n    maxX: number,\n    minY: number,\n    maxY: number,\n    minZ: number,\n    maxZ: number\n}\n\nexport class CubeHitbox {\n    constructor(\n        public attached: Entity,\n        private width: number, \n        private depth: number, \n        private height: number, \n        private offsetX: number = 0,\n        private offsetY: number = 0,\n        private offsetZ: number = 0\n    ) {}\n\n    public getBoundingBox() {\n        return {\n            minX: this.attached.position.x + this.offsetX - this.width / 2,\n            maxX: this.attached.position.x + this.offsetX + this.width / 2,\n            minY: this.attached.position.y + this.offsetY - this.height,\n            maxY: this.attached.position.y + this.offsetY,\n            minZ: this.attached.position.z + this.offsetZ - this.depth / 2,\n            maxZ: this.attached.position.z + this.offsetZ + this.depth / 2\n        }\n    }\n\n    public getCorners(): Vector3[] {\n        const { minX, maxX, minY, maxY, minZ, maxZ } = this.getBoundingBox();\n    \n        return [\n            new Vector3(minX, minY, minZ), // Bottom-front-left\n            new Vector3(maxX, minY, minZ), // Bottom-front-right\n            new Vector3(maxX, minY, maxZ), // Bottom-back-right\n            new Vector3(minX, minY, maxZ), // Bottom-back-left\n            new Vector3(minX, maxY, minZ), // Top-front-left\n            new Vector3(maxX, maxY, minZ), // Top-front-right\n            new Vector3(maxX, maxY, maxZ), // Top-back-right\n            new Vector3(minX, maxY, maxZ), // Top-back-left\n        ];\n    }\n\n    public intersectAABB(b: CubeHitbox): IntersectArea | null {\n        const box1 = this.getBoundingBox();\n        const box2 = b.getBoundingBox();\n\n        const minX = Math.max(box1.minX, box2.minX);\n        const maxX = Math.min(box1.maxX, box2.maxX);\n        const minY = Math.max(box1.minY, box2.minY);\n        const maxY = Math.min(box1.maxY, box2.maxY);\n        const minZ = Math.max(box1.minZ, box2.minZ);\n        const maxZ = Math.min(box1.maxZ, box2.maxZ);\n\n        if (minX < maxX && minY < maxY && minZ < maxZ) {\n            return {\n                minX: minX,\n                maxX: maxX,\n                minY: minY,\n                maxY: maxY,\n                minZ: minZ,\n                maxZ: maxZ\n            };\n        }\n\n        return null;\n    }\n\n    public overlapAABB(b: CubeHitbox) {\n        const box1 = this.getBoundingBox();\n        const box2 = b.getBoundingBox();\n\n        const overlapX = Math.min(box1.maxX - box2.minX, box2.maxX - box1.minX);\n        const overlapY = Math.min(box1.maxY - box2.minY, box2.maxY - box1.minY);\n        const overlapZ = Math.min(box1.maxZ - box2.minZ, box2.maxZ - box2.minZ);\n\n        return new Vector3(overlapX, overlapY, overlapZ);\n    }\n}\n\nexport class SphereHitbox {\n    constructor(public radius: number, position: Vector3) {\n\n    }\n}\n\nexport type HitboxType = CubeHitbox | SphereHitbox;\n\nexport class Collidable extends Component {\n    public constructor(\n        public box: CubeHitbox | SphereHitbox\n    ) {\n        super();\n    }\n}\n","import { Entity } from '../Entities/Entity';\nimport { Component } from './Component';\n\nexport class Drawable extends Component {\n    public opacity = 1;\n    public fadeInElapsed = 0;\n    public fadeOut = false;\n    public fadeOutElapsed = 0;\n    public readonly fadeDuration = 0.1; //seconds\n\n    public constructor(public fadeIn: boolean = false) {\n        super();\n        if (fadeIn) {\n            this.opacity = 0;\n        }\n    }\n}","\n\nimport { Entity, EntityDirection, EntityState } from './Entity';\nimport PlayerSprite from './Enemies/Slimes/slime-blue.png';\nimport { Physical } from '../Components/Physical';\nimport { Movable } from '../Components/Movable';\nimport { Stats } from '../Components/Stats';\nimport { Collidable, CubeHitbox } from '../Components/Collidable';\nimport { Drawable } from '../Components/Drawable';\nimport { Game } from '../Game/Game';\nimport tile30 from '../../assets/tiles/tile_30.png';\nimport { Vector3 } from '../Util/Vector3';\n\nexport class Player extends Entity {\n    public frameHeight = 32;\n    public frameWidth = 32;\n    public width = 32;\n    public height = 32;\n    public position = new Vector3(3, 3, 3);\n    public castShadow = true;\n\n    constructor() {\n        super();\n\n        this.addComponents(\n            new Drawable(),\n            new Stats(),\n            new Physical(),\n            new Collidable(new CubeHitbox(this, 0.33, 0.33, 0.5, 0, 0, 0)),\n            new Movable(),\n        );\n\n        this.image.src = PlayerSprite;\n\n        // this.spirteSheetMap = [\n        //     {\n        //         state: EntityState.IDLING,\n        //         direction: EntityDirection.S,\n        //         speed: 0.5,\n        //         steps: 4,\n        //         xIndex: 0,\n        //         yIndex: 0\n        //     },\n        //     {\n        //         state: EntityState.IDLING,\n        //         direction: EntityDirection.E,\n        //         speed: 0.5,\n        //         steps: 4,\n        //         xIndex: 0,\n        //         yIndex: 1 \n        //     },\n        //     {\n        //         state: EntityState.IDLING,\n        //         direction: EntityDirection.W,\n        //         speed: 0.5,\n        //         steps: 4,\n        //         xIndex: 0,\n        //         yIndex: 1\n        //     },\n        //     {\n        //         state: EntityState.IDLING,\n        //         direction: EntityDirection.N,\n        //         speed: 0.5,\n        //         steps: 4,\n        //         xIndex: 0,\n        //         yIndex: 2\n        //     },\n        //     {\n        //         state: EntityState.WALKING,\n        //         direction: EntityDirection.S,\n        //         speed: 0.5,\n        //         steps: 4,\n        //         xIndex: 0,\n        //         yIndex: 3\n        //     },\n        //     {\n        //         state: EntityState.WALKING,\n        //         direction: EntityDirection.E,\n        //         speed: 0.5,\n        //         steps: 4,\n        //         xIndex: 0,\n        //         yIndex: 4\n        //     },\n        //     {\n        //         state: EntityState.WALKING,\n        //         direction: EntityDirection.W,\n        //         speed: 0.5,\n        //         steps: 4,\n        //         xIndex: 0,\n        //         yIndex: 4\n        //     },\n        //     {\n        //         state: EntityState.WALKING,\n        //         direction: EntityDirection.N,\n        //         speed: 0.5,\n        //         steps: 4,\n        //         xIndex: 0,\n        //         yIndex: 5\n        //     },\n        // ];\n\n        this.spirteSheetMap = [\n            {\n                state: EntityState.WALKING,\n                direction: EntityDirection.S,\n                speed: 0.8,\n                steps: 6,\n                xIndex: 0,\n                yIndex: 0\n            },\n            {\n                state: EntityState.WALKING,\n                direction: EntityDirection.E,\n                speed: 0.8,\n                steps: 6,\n                xIndex: 0,\n                yIndex: 0\n            },\n            {\n                state: EntityState.WALKING,\n                direction: EntityDirection.W,\n                speed: 0.8,\n                steps: 6,\n                xIndex: 0,\n                yIndex: 0,\n            },\n            {\n                state: EntityState.WALKING,\n                direction: EntityDirection.N,\n                speed: 0.8,\n                steps: 6,\n                xIndex: 0,\n                yIndex: 0,\n            },\n            {\n                state: EntityState.IDLING,\n                direction: EntityDirection.S,\n                speed: 0.8,\n                steps: 6,\n                xIndex: 0,\n                yIndex: 1\n            },\n            {\n                state: EntityState.IDLING,\n                direction: EntityDirection.E,\n                speed: 0.8,\n                steps: 6,\n                xIndex: 0,\n                yIndex: 1\n            },\n            {\n                state: EntityState.IDLING,\n                direction: EntityDirection.W,\n                speed: 0.8,\n                steps: 6,\n                xIndex: 0,\n                yIndex: 1,\n            },\n            {\n                state: EntityState.IDLING,\n                direction: EntityDirection.N,\n                speed: 0.8,\n                steps: 6,\n                xIndex: 0,\n                yIndex: 1,\n            }\n        ];\n    }\n}\n","import { Entity, EntityDirection, EntityState } from '../../Entity';\nimport SlimeBlue from './slime-blue.png';\nimport { Physical } from '../../../Components/Physical';\nimport { Movable } from '../../../Components/Movable';\nimport { Stats } from '../../../Components/Stats';\nimport { Collidable, CubeHitbox } from '../../../Components/Collidable';\nimport { Vector3 } from '../../../Util/Vector3';\nimport { Drawable } from '../../../Components/Drawable';\n\nexport class Slime extends Entity {\n    public frameHeight: number = 32;\n    public frameWidth: number = 32;\n    public width: number = 32;\n    public height: number = 32;\n    public castShadow: boolean = true;\n\n    constructor(public position = new Vector3(3, 3, 3)) {\n        super();\n\n        this.addComponents(\n            new Drawable(),\n            new Stats(),\n            new Physical(),\n            new Collidable(new CubeHitbox(this, 0.33, 0.33, 0.5, 0, 0, 0)),\n            new Movable(),\n        );\n\n        this.image.src = SlimeBlue;\n\n        this.spirteSheetMap = [\n            {\n                state: EntityState.WALKING,\n                direction: EntityDirection.S,\n                speed: 0.8,\n                steps: 6,\n                xIndex: 0,\n                yIndex: 0\n            },\n            {\n                state: EntityState.WALKING,\n                direction: EntityDirection.E,\n                speed: 0.8,\n                steps: 6,\n                xIndex: 0,\n                yIndex: 0\n            },\n            {\n                state: EntityState.WALKING,\n                direction: EntityDirection.W,\n                speed: 0.8,\n                steps: 6,\n                xIndex: 0,\n                yIndex: 0,\n            },\n            {\n                state: EntityState.WALKING,\n                direction: EntityDirection.N,\n                speed: 0.8,\n                steps: 6,\n                xIndex: 0,\n                yIndex: 0,\n            },\n            {\n                state: EntityState.IDLING,\n                direction: EntityDirection.S,\n                speed: 0.8,\n                steps: 6,\n                xIndex: 0,\n                yIndex: 1\n            },\n            {\n                state: EntityState.IDLING,\n                direction: EntityDirection.E,\n                speed: 0.8,\n                steps: 6,\n                xIndex: 0,\n                yIndex: 1\n            },\n            {\n                state: EntityState.IDLING,\n                direction: EntityDirection.W,\n                speed: 0.8,\n                steps: 6,\n                xIndex: 0,\n                yIndex: 1,\n            },\n            {\n                state: EntityState.IDLING,\n                direction: EntityDirection.N,\n                speed: 0.8,\n                steps: 6,\n                xIndex: 0,\n                yIndex: 1,\n            }\n        ];\n    }\n}\n","import { Entity } from '../Entities/Entity';\n\nexport class EntityAdded {\n    public constructor(\n        public readonly entity: Entity\n    ) {}\n}\n","import { Entity } from '../Entities/Entity';\n\nexport class EntityRemoved {\n    public constructor(\n        public readonly entity: Entity\n    ) {}\n}\n","export class EventBus {\n    private readonly events = new Map<Function, Function[]>();\n\n    public register(type: Function, callback: Function): void {\n        const callbacks = this.events.get(type);\n\n        if (callbacks) {\n            callbacks.push(callback);\n        } else {\n            this.events.set(type, [ callback ]);\n        }\n    }\n\n    public emit(event: object): void {\n        const callbacks = this.events.get(event.constructor);\n\n        if (callbacks) {\n            for (const callback of callbacks) {\n                callback(event);\n            }\n        }\n    }\n}\n","import { Entity } from '../Entities/Entity';\nimport { Game } from '../Game/Game';\n\nexport class System {\n    protected readonly filteredEntities: Entity[] = []\n\n    public addEntity(entity: Entity) {\n        this.filteredEntities.push(entity);\n    }\n\n    public removeEntity(entity: Entity) {\n        const index = this.filteredEntities.indexOf(entity);\n        this.filteredEntities.splice(index, 1);\n    }\n\n    public hasEntity(entity: Entity) {\n        return this.filteredEntities.includes(entity);\n    }\n\n    public appliesTo(entity: Entity): boolean {\n        return false;\n    }\n\n    public initialize(game: Game): void {\n        // Intentionally left empty\n    }\n\n    public filteredEntitiesUpdated(game: Game): void {\n        // Intentionally left empty\n    }\n\n    public update(dt: number, game: Game): void {\n        throw new Error('Not implemented');\n    }\n}\n","import { Entity } from '../Entities/Entity';    \nimport { Player } from '../Entities/Player';\nimport { Game } from '../Game/Game';\nimport { Vector3 } from '../Util/Vector3';\nimport { System } from './System';\n\nexport class CameraSystem extends System {\n    private targetPosition: Vector3 | null = null;\n\n    public constructor() {\n        super();\n    }\n    \n    public appliesTo(entity: Entity): boolean {\n        return entity instanceof Player;\n    }\n\n    public update(dt: number, game: Game): void {\n        for (const entity of this.filteredEntities) {\n            if (!this.targetPosition) {\n                game.cameraPosition = entity.position;\n                this.targetPosition = game.cameraPosition;\n                return;\n            }\n            \n            this.targetPosition = entity.position;\n            game.cameraPosition = entity.position;\n            // game.cameraPosition = new Vector3(\n            //     lerp(game.cameraPosition.x, this.targetPosition.x, 0.08),\n            //     lerp(game.cameraPosition.y, this.targetPosition.y, 0.08),\n            //     lerp(game.cameraPosition.z, this.targetPosition.z, 0.08),\n            // );\n        }\n    }\n}\n\nfunction lerp(start: number, end: number, t: number) {\n    return start + (end - start) * t;\n}\n","import { Movable } from '../Components/Movable';\nimport { Physical } from '../Components/Physical';\nimport { Stats } from '../Components/Stats';\nimport { Entity } from '../Entities/Entity';    \nimport { Player } from '../Entities/Player';\nimport { Game } from '../Game/Game';\nimport { Vector3 } from '../Util/Vector3';\nimport { System } from './System';\n\nexport class MovementSystem extends System {\n    private inputs = new Set();\n\n    public constructor() {\n        super();\n\n        window.addEventListener('keydown', this.onKeyDown.bind(this));\n        window.addEventListener('keyup', this.onKeyUp.bind(this));\n    }\n\n    public onKeyDown(event: KeyboardEvent) {\n        switch (event.code) {\n            case 'KeyW': this.inputs.add('up'); break;\n            case 'KeyS': this.inputs.add('down'); break;\n            case 'KeyA': this.inputs.add('left'); break;\n            case 'KeyD': this.inputs.add('right'); break;\n            case 'ShiftLeft': this.inputs.add('sprint'); break;\n            case 'Space': this.inputs.add('jump'); break;\n        }\n    }\n\n    public onKeyUp(event: KeyboardEvent) {\n        switch (event.code) {\n            case 'KeyW': this.inputs.delete('up'); break;\n            case 'KeyS': this.inputs.delete('down'); break;\n            case 'KeyA': this.inputs.delete('left'); break;\n            case 'KeyD': this.inputs.delete('right'); break;\n            case 'ShiftLeft': this.inputs.delete('sprint'); break;\n            case 'Space': this.inputs.delete('jump'); break;\n        }\n    }\n    \n    public appliesTo(entity: Entity): boolean {\n        return entity instanceof Player && entity.hasComponent(Movable) && entity.hasComponent(Physical);\n    }\n\n    public update(dt: number, game: Game): void {\n        for (const entity of this.filteredEntities) {\n            const movable = entity.getComponent(Movable);\n            const physical = entity.getComponent(Physical);\n            const stats = entity.hasComponent(Stats) ? entity.getComponent(Stats) : null;\n\n            const speed = stats ? stats.speed.current : 1;\n\n            let y = 0;\n            let x = 0;\n            let z = 0;\n            let multiplier = 1;\n\n            // MOVE UP\n            if (this.inputs.has('up')) {\n                z += 1;\n                x -= 1;\n            }\n\n            // MOVE DOWN\n            if (this.inputs.has('down')) {\n                z -= 1;\n                x += 1;\n            }\n\n            // MOVE RIGHT\n            if (this.inputs.has('left')) {\n                x -= 1;\n                z -= 1;\n            }\n\n            // MOVE LEFT\n            if (this.inputs.has('right')) {\n                x += 1;\n                z += 1;\n            }\n    \n            // JUMP\n            if (this.inputs.has('jump') && physical.velocity.y === 0) {\n                y += 1;\n            }\n    \n                // SPRINT\n                if (\n                    (\n                        this.inputs.has('up') ||\n                        this.inputs.has('down') ||\n                        this.inputs.has('left') ||\n                        this.inputs.has('right')\n                    ) \n                    && this.inputs.has('sprint')\n                ) {\n                    if (stats && stats?.stamina.current > 0) {\n                        multiplier = 2.2;\n                        stats.stamina.current -= 1;\n                    }\n                }\n\n                movable.velocity = new Vector3(\n                    x / Game.TILE_SIZE_WIDTH * speed * multiplier, \n                    0, \n                    z / Game.TILE_SIZE_WIDTH * speed * multiplier\n                );\n\n                physical.velocity = physical.velocity.add(new Vector3(0, y * 16, 0));\n        }\n    }\n}","import { Drawable } from '../Components/Drawable';\nimport { Entity } from '../Entities/Entity';    \nimport { Game } from '../Game/Game';\nimport { System } from './System';\n\nexport class DrawSystem extends System {\n    private readonly bufferCanvas: HTMLCanvasElement = document.createElement('canvas');\n    private readonly bufferCtx: CanvasRenderingContext2D = this.bufferCanvas.getContext('2d')!;\n\n    public constructor() {\n        super();\n    }\n    \n    public appliesTo(entity: Entity): boolean {\n        return entity.hasComponent(Drawable);\n    }\n\n    public update(dt: number, game: Game): void {\n        this.bufferCanvas.height = game.ctx.canvas.clientHeight;\n        this.bufferCanvas.width = game.ctx.canvas.clientWidth;\n        this.bufferCtx.imageSmoothingEnabled = false;\n\n        const screenPos = Game.worldPosToScreenPos(game.cameraPosition);\n\n        // Calculate the camera offsets to center the view\n        const cameraX = screenPos.x - this.bufferCanvas.width / 2;\n        const cameraY = screenPos.y - this.bufferCanvas.height / 2;\n\n        // Set up the transformation: translate to the camera position\n        this.bufferCtx.transform(1, 0, 0, 1, -cameraX, -cameraY);\n\n        const orderedFilteredEntities = [...this.filteredEntities].sort((a, b) => { \n            const aFloored = a.position;\n            const bFloored = b.position;\n            \n            // 1. Compare by zIndex (ascending)\n            if (a.zIndex !== b.zIndex) {\n                return a.zIndex - b.zIndex; \n            }\n        \n            // 2. If zIndex is the same, compare by z position (descending, to draw further objects first)\n            if (bFloored.z !== aFloored.z) {\n                return bFloored.z - aFloored.z;\n            }\n        \n            // 3. If z position is the same, compare by y position (ascending, so lower objects are drawn first)\n            if (aFloored.y !== bFloored.y) {\n                return aFloored.y - bFloored.y;\n            }\n        \n            // 4. If both z and y positions are the same, compare by x position (ascending)\n            return aFloored.x - bFloored.x;\n        });\n        \n\n        for (const entity of orderedFilteredEntities) {\n            const drawable = entity.getComponent(Drawable);\n\n            if (drawable.fadeIn) {\n                animateDrawableFadeIn(drawable, dt);\n            }\n\n            if (drawable.fadeOut) {\n                animateDrawableFadeOut(drawable, dt);\n            }\n\n            if (drawable.opacity <= 0) {\n                entity.removeComponent(drawable)\n            }\n\n            entity.draw(this.bufferCtx, dt, drawable.opacity);\n        }\n\n        game.ctx.clearRect(0, 0, game.ctx.canvas.clientWidth, game.ctx.canvas.clientHeight);\n        game.ctx.drawImage(this.bufferCanvas, 0, 0);\n    }\n}\n\nfunction animateDrawableFadeIn(drawable: Drawable, dt: number) {\n    drawable.fadeInElapsed += dt;\n\n    drawable.opacity = easeInQuad(drawable.fadeInElapsed, 0, 1, drawable.fadeDuration);\n\n    if (drawable.opacity >= 1) {\n        drawable.opacity = 1;\n        drawable.fadeInElapsed = drawable.fadeDuration;\n        drawable.fadeIn = false;\n    }\n}\n\nfunction animateDrawableFadeOut(drawable: Drawable, dt: number) {\n    drawable.fadeOutElapsed += dt;\n    drawable.opacity = 1 - easeInQuad(drawable.fadeOutElapsed, 0, 1, drawable.fadeDuration);\n\n    if (drawable.opacity <= 0) {\n        drawable.opacity = 0;\n        drawable.fadeOutElapsed = drawable.fadeDuration;\n        drawable.fadeOut = false;\n    }\n    //drawable.opacity = Math.max(0, drawable.opacity);\n\n    // if (drawable.opacity <= 0) {\n    //     drawable.opacity = 0;\n    //     drawable.elapsed = drawable.fadeDuration;\n    //     drawable.fadeOut = false;\n    // }\n}\n\nfunction easeLinear (time: number, start: number, end: number, duration: number) {\n    return end * time / duration + start;\n}\n\nfunction easeInQuad (time: number, start: number, end: number, duration: number) {\n    return end * (time /= duration) * time + start;\n}\n\nfunction easeOutQuad (time: number, start: number, end: number, duration: number) {\n    return -end * (time /= duration) * (time - 2) + start;\n}\n","import { Movable } from '../Components/Movable';\nimport { Entity, EntityState } from '../Entities/Entity';\nimport { Game } from '../Game/Game';\nimport { System } from './System';\n\nexport class StateSystem extends System {\n\tpublic constructor() {\n\t\tsuper();\n\t}\n\n\tpublic appliesTo(entity: Entity): boolean {\n\t\treturn true;\n\t}\n\n\tpublic update(dt: number, game: Game): void {\n\t\tfor (const entity of this.filteredEntities) {\n\t\t\tif (entity.hasComponent(Movable)) {\n                const movable = entity.getComponent(Movable);\n\n                if (movable.velocity.y > 0) {\n                    entity.setState(EntityState.AIRBORNE);\n\n                    return;\n                }\n\n                if (movable.velocity.length()) {\n                    entity.setState(EntityState.WALKING);\n\n                    return;\n                }\n            }\n\n            entity.setState(EntityState.IDLING);\n\t\t}\n\t}\n}","import { Movable } from '../Components/Movable';\nimport { Physical } from '../Components/Physical';\nimport { Entity, EntityDirection } from '../Entities/Entity';    \nimport { Game } from '../Game/Game';\nimport { Vector3 } from '../Util/Vector3';\nimport { System } from './System';\n\nexport class VelocitySystem extends System {\n    public constructor() {\n        super();\n    }\n    \n    public appliesTo(entity: Entity): boolean {\n        return entity.hasComponent(Physical);\n    }\n\n    public update(dt: number, game: Game): void {\n        for (const entity of this.filteredEntities) {\n            const physical = entity.getComponent(Physical);\n            \n            let extraX = 0;\n            let extraY = 0;\n            let extraZ = 0;\n\n            if (entity.hasComponent(Movable)) {\n                const movable = entity.getComponent(Movable);\n\n                extraX += movable.velocity.x;\n                extraY += movable.velocity.y;\n                extraZ += movable.velocity.z;\n\n                if (movable.velocity.x !== 0 || movable.velocity.z !== 0) {\n                    entity.direction = getDirection(movable.velocity.x, movable.velocity.z);\n                }\n            }\n\n            const x = extraX + physical.velocity.x;\n            const z = extraZ + physical.velocity.z;\n            const y = extraY + physical.velocity.y;  \n            \n            //console.log(physical.velocity.y)\n\n            entity.position = entity.position.add(new Vector3(x, y, z).multiplyScalar(dt));\n        }\n    }\n}\n\nfunction getDirection(x: number, z: number) {\n    if (Math.abs(x) > Math.abs(z)) {\n        return x > 0 ? EntityDirection.E : EntityDirection.W;\n    } else {\n        return z > 0 ? EntityDirection.S : EntityDirection.N;\n    }\n}","import { Stats } from '../Components/Stats';\nimport { Entity } from '../Entities/Entity';    \nimport { Player } from '../Entities/Player';\nimport { Game } from '../Game/Game';\nimport { System } from './System';\n\nexport class HudSystem extends System {\n    public constructor() {\n        super();\n    }\n    \n    public appliesTo(entity: Entity): boolean {\n        return entity instanceof Player;\n    }\n\n    public update(dt: number, game: Game): void {\n        const player = this.filteredEntities[0];\n\n        if (player) {\n            drawHud(player, game.ctx);\n        }\n    }\n}\n\n\nfunction drawHud(player: Player, ctx: CanvasRenderingContext2D): void {\n    if (!player.hasComponent(Stats)) return;\n\n    const stats = player.getComponent(Stats);\n\n    // HUD settings\n    const barWidth = ctx.canvas.width / 5; // Width of each bar\n    const barHeight = 20; // Height of each bar\n    const barPadding = 10; // Padding between bars\n\n    const totalBarsHeight = (barHeight * 3) + (barPadding * 2); // Total height of 3 bars + padding\n    const startX = (ctx.canvas.width - barWidth) / 2; // Start at the center of the canvas (horizontally)\n    const startY = ctx.canvas.height - totalBarsHeight - 20; // 20px above the bottom of the screen\n\n    // Health bar (red)\n    drawBar(\n        ctx, \n        startX, \n        startY, \n        barWidth, \n        barHeight, \n        stats.health.current / stats.health.max, \n        '#D77D7D'\n    );\n\n    // Mana bar (blue)\n    drawBar(\n        ctx, \n        startX, \n        startY + barHeight + barPadding, \n        barWidth, barHeight, \n        stats.mana.current / stats.mana.max, \n        '#6C8FC0'\n    );\n\n    // Stamina bar (green)\n    drawBar(\n        ctx, \n        startX, \n        startY + (barHeight + barPadding) * 2, \n        barWidth, \n        barHeight, \n        stats.stamina.current / stats.stamina.max, \n        '#7F9C77'\n    );\n}\n\nfunction drawBar(ctx, x, y, width, height, percentage, color) {\n    // Background bar (grey)\n    ctx.fillStyle = '#555';\n    ctx.fillRect(x, y, width, height);\n\n    // Fill bar based on percentage\n    ctx.fillStyle = color;\n    ctx.fillRect(x, y, width * percentage, height);\n}","import { Entity } from './Entity';\nimport { Game } from '../Game/Game';\nimport { Vector3 } from '../Util/Vector3';\n\n// Import all 30 tile images\nimport tile0 from '../../assets/tiles/tile_0.png';\nimport tile1 from '../../assets/tiles/tile_1.png';\nimport tile2 from '../../assets/tiles/tile_2.png';\nimport tile3 from '../../assets/tiles/tile_3.png';\nimport tile4 from '../../assets/tiles/tile_4.png';\nimport tile5 from '../../assets/tiles/tile_5.png';\nimport tile6 from '../../assets/tiles/tile_6.png';\nimport tile7 from '../../assets/tiles/tile_7.png';\nimport tile8 from '../../assets/tiles/tile_8.png';\nimport tile9 from '../../assets/tiles/tile_9.png';\nimport tile10 from '../../assets/tiles/tile_10.png';\nimport tile11 from '../../assets/tiles/tile_11.png';\nimport tile12 from '../../assets/tiles/tile_12.png';\nimport tile13 from '../../assets/tiles/tile_13.png';\nimport tile14 from '../../assets/tiles/tile_14.png';\nimport tile15 from '../../assets/tiles/tile_15.png';\nimport tile16 from '../../assets/tiles/tile_16.png';\nimport tile17 from '../../assets/tiles/tile_17.png';\nimport tile18 from '../../assets/tiles/tile_18.png';\nimport tile19 from '../../assets/tiles/tile_19.png';\nimport tile20 from '../../assets/tiles/tile_20.png';\nimport tile21 from '../../assets/tiles/tile_21.png';\nimport tile22 from '../../assets/tiles/tile_22.png';\nimport tile23 from '../../assets/tiles/tile_23.png';\nimport tile24 from '../../assets/tiles/tile_24.png';\nimport tile25 from '../../assets/tiles/tile_25.png';\nimport tile26 from '../../assets/tiles/tile_26.png';\nimport tile27 from '../../assets/tiles/tile_27.png';\nimport tile28 from '../../assets/tiles/tile_28.png';\nimport tile29 from '../../assets/tiles/tile_29.png';\nimport tile30 from '../../assets/tiles/tile_30.png';\nimport { Collidable, CubeHitbox } from '../Components/Collidable';\n\n// Map each tile number to its corresponding image\nconst imageMap: { [key: number]: string } = {\n    0: tile0,\n    1: tile1,\n    2: tile2,\n    3: tile3,\n    4: tile4,\n    5: tile5,\n    6: tile6,\n    7: tile7,\n    8: tile8,\n    9: tile9,\n    10: tile10,\n    11: tile11,\n    12: tile12,\n    13: tile13,\n    14: tile14,\n    15: tile15,\n    16: tile16,\n    17: tile17,\n    18: tile18,\n    19: tile19,\n    20: tile20,\n    21: tile21,\n    22: tile22,\n    23: tile23,\n    24: tile24,\n    25: tile25,\n    26: tile26,\n    27: tile27,\n    28: tile28,\n    29: tile29,\n    30: tile30,\n};\n\nexport class Tile extends Entity {\n    public frameHeight = 32;\n    public frameWidth = 32;\n    public width = Game.TILE_SIZE_WIDTH;\n    public height = Game.TILE_SIZE_WIDTH;\n\n    constructor(\n        public tileNum: number,\n        public position: Vector3,\n        public zIndex: number\n    ) {\n        super();\n\n        // Access the image URL based on tileNum\n        this.image.src = imageMap[this.tileNum];\n        this.addComponent(new Collidable(new CubeHitbox(this, 1, 1, 0.5, 0)));\n    }\n\n    // public draw(ctx: CanvasRenderingContext2D, dt: number, opacity: number) {\n    //     const screenPos = Game.worldPosToScreenPos(this.position);\n    //     const width = this.width;\n    //     const height = this.height;\n\n    //     ctx.imageSmoothingEnabled = false;\n\n    //     let animationData = this.spirteSheetMap.find((map) => \n    //         map.state === this.state &&\n    //         map.direction === this.direction\n    //     );\n        \n    //     const xIndex = animationData?.xIndex ?? 0;\n    //     const yIndex = animationData?.yIndex ?? 0;\n    //     const steps = animationData?.steps ?? 0;\n    //     const speed = animationData?.speed ?? 0;\n        \n    //     // Calculate source X and Y position in the sprite sheet\n    //     const sourceX = (xIndex + this.step) * this.frameWidth;\n    //     const sourceY = yIndex * this.frameHeight;\n    \n    //     // Save the current transformation matrix\n    //     ctx.save();      \n\n    //     ctx.globalAlpha = opacity;\n\n    //     // Draw the specific frame from the sprite sheet\n    //     ctx.drawImage(\n    //         this.image,\n    //         sourceX,\n    //         sourceY,  \n    //         this.frameWidth,\n    //         this.frameHeight,\n    //         screenPos.x,    \n    //         screenPos.y,\n    //         width,\n    //         height\n    //     );\n        \n    //     ctx.restore();\n        \n    //     // Accumulate the time elapsed\n    //     this.timeElapsed += dt;\n    \n    //     // Calculate the duration of each frame in the animation\n    //     const frameDuration = speed / steps;  // Total time for the whole animation divided by the number of steps\n    \n    //     if (this.timeElapsed >= frameDuration) {\n    //         this.step++;\n    //         this.timeElapsed = 0;  // Reset time for the next frame\n    //     }\n    \n    //     if (this.step >= steps) {\n    //         this.step = xIndex;  // Reset step for looping animations\n    //     }\n    // } \n}\n","import { Drawable } from '../Components/Drawable';\nimport { Collidable, CubeHitbox } from '../Components/Collidable';\nimport { Entity } from '../Entities/Entity';    \nimport { Tile } from '../Entities/Tile';\nimport { Game } from '../Game/Game';\nimport { Vector3 } from '../Util/Vector3';\nimport { System } from './System';\n\nexport class DebugSystem extends System {\n    private div = document.createElement('div');\n    private readonly bufferCanvas: HTMLCanvasElement = document.createElement('canvas');\n    private readonly bufferCtx: CanvasRenderingContext2D = this.bufferCanvas.getContext('2d')!;\n\n    public constructor() {\n        super();\n\n        document.body.appendChild(this.div);\n\n        this.div.style.cssText = `\n            position: absolute;\n            top: 0;\n            right: 0;\n            background-color: rgba(0, 0, 0, 0.5);\n            padding: 10px;\n            border-radius: 5px;\n            max-width: 300px;\n            color: white;\n        `;\n    }\n    \n    public appliesTo(entity: Entity): boolean {\n        return entity.hasComponent(Drawable);\n    }\n\n    public update(dt: number, game: Game): void {\n        this.bufferCanvas.height = game.ctx.canvas.clientHeight;\n        this.bufferCanvas.width = game.ctx.canvas.clientWidth;\n        this.bufferCtx.imageSmoothingEnabled = false;\n\n        const screenPos = Game.worldPosToScreenPos(game.cameraPosition);\n\n        // Calculate the camera offsets to center the view\n        const cameraX = screenPos.x - this.bufferCanvas.width / 2;\n        const cameraY = screenPos.y - this.bufferCanvas.height / 2;\n\n        // Set up the transformation: translate to the camera position\n        this.bufferCtx.transform(1, 0, 0, 1, -cameraX, -cameraY);\n\n        for (const entity of this.filteredEntities) {\n            if (entity.hasComponent(Collidable) && !(entity instanceof Tile)) {\n                const hitbox = entity.getComponent(Collidable);\n\n                if (hitbox.box instanceof CubeHitbox) {\n                    drawCube(hitbox.box, this.bufferCtx);\n                }\n            }\n\n            if (true) {\n                drawPoint(\n                    Game.worldPosToScreenPos(entity.position),\n                    `${entity.position.floor().toString()}`, \n                    'yellow', \n                    this.bufferCtx,\n                    2\n                );\n            }\n        }\n\n        // Show FPS\n        this.div.innerHTML = `\n            FPS: ${Math.floor(game.fps)} <br/>\n            Camera position: ${game.cameraPosition.floor().toString()}\n        `;\n\n        game.ctx.drawImage(this.bufferCanvas, 0, 0);\n    }\n}\n\nfunction drawPoint(position: Vector3, text: string, color: string, ctx: CanvasRenderingContext2D, size = 4) {\n    ctx.fillStyle = color;\n    ctx.fillRect(position.x - size/2, position.y - size/2, size, size);\n    ctx.fillStyle = color;\n\n    // const textWidth = ctx.measureText(text).width;\n    // const textX = position.x - textWidth / 2;\n    // const textZ = position.y + 20;\n    // ctx.fillText(text, textX, textZ);\n}\n\nfunction drawCube(box: CubeHitbox, context: CanvasRenderingContext2D) {\n        // Get corners in world space\n        const corners = box.getCorners();\n    \n        // Convert each corner to screen coordinates\n        const screenCorners = corners.map(corner => Game.worldPosToScreenPos(corner));\n    \n        // Draw edges for the 3D bounding box in 2D\n        context.beginPath();\n        \n        // Bottom face\n        context.moveTo(screenCorners[0].x, screenCorners[0].y);\n        context.lineTo(screenCorners[1].x, screenCorners[1].y);\n        context.lineTo(screenCorners[2].x, screenCorners[2].y);\n        context.lineTo(screenCorners[3].x, screenCorners[3].y);\n        context.closePath();  // Close bottom face\n    \n        // Top face\n        context.moveTo(screenCorners[4].x, screenCorners[4].y);\n        context.lineTo(screenCorners[5].x, screenCorners[5].y);\n        context.lineTo(screenCorners[6].x, screenCorners[6].y);\n        context.lineTo(screenCorners[7].x, screenCorners[7].y);\n        context.closePath();  // Close top face\n    \n        // Vertical edges connecting top and bottom faces\n        for (let i = 0; i < 4; i++) {\n            context.moveTo(screenCorners[i].x, screenCorners[i].y);\n            context.lineTo(screenCorners[i + 4].x, screenCorners[i + 4].y);\n        }\n    \n        // Set styling and stroke the lines\n        context.strokeStyle = \"red\";\n        context.lineWidth = 1;\n        context.stroke();\n}\n\nfunction drawCircle(position: Vector3, w, h, color, ctx: CanvasRenderingContext2D) {\n    \n}","import { Drawable } from '../Components/Drawable';\nimport { Entity } from '../Entities/Entity';    \nimport { Game } from '../Game/Game';\nimport { Vector3 } from '../Util/Vector3';\nimport { System } from './System';\n\nexport class ChunkSystem extends System {\n    private lastCameraPosition: Vector3 | null = null;\n\n    public constructor() {\n        super();\n    }\n\n    public initialize(game: Game): void {\n    }\n    \n    public appliesTo(entity: Entity): boolean {\n        return true;\n    }\n\n    public update(dt: number, game: Game): void {\n        const cameraPosition = game.cameraPosition.floor();\n        \n        if (this.lastCameraPosition !== null && this.lastCameraPosition.x === cameraPosition.x && this.lastCameraPosition.z === cameraPosition.z) return;\n\n        this.lastCameraPosition = cameraPosition;        \n\n        const radius = 11;\n        \n        for (const entity of this.filteredEntities) {\n            const inRadius = entity.position.distanceTo(game.cameraPosition) < radius;\n\n            const drawable = entity.hasComponent(Drawable) ? entity.getComponent(Drawable) : null;\n\n            // if (drawable?.fadeIn || drawable?.fadeOut) return;\n\n            if (inRadius && !drawable) {\n                entity.addComponent(new Drawable(true));\n            }\n            \n            if (!inRadius && drawable) {\n                drawable.fadeOut = true;\n                drawable.fadeIn = false;\n            }\n        }\n    }  \n}\n\nfunction isPointInCircle(x: number, y: number, cx: number, cy: number, radius: number) {\n    const distanceSquared = (x - cx) ** 2 + (y - cy) ** 2;\n    return distanceSquared <= radius ** 2;\n}","import { Collidable, CubeHitbox, IntersectArea } from '../Components/Collidable';\nimport { Physical } from '../Components/Physical';\nimport { Entity } from '../Entities/Entity';    \nimport { Game } from '../Game/Game';\nimport { System } from './System';\n\n// Friction coefficient (adjust as necessary)\nconst frictionCoefficient = 0.9;\n\nexport class PhysicalCollisionSystem extends System {\n    public constructor() {\n        super();\n    }\n    \n    public appliesTo(entity: Entity): boolean {\n        return entity.hasComponent(Collidable) && entity.hasComponent(Physical);\n    }\n\n    public update(dt: number, game: Game): void {\n        const radius = 20;\n\n        for (let i = 0; i < this.filteredEntities.length; i++) {\n            for (let j = i + 1; j < this.filteredEntities.length; j++) {\n                const en1 = this.filteredEntities[i];\n                const en2 = this.filteredEntities[j];\n\n                const inRadius = en1.position.distanceTo(en2.position) < radius;\n\n                //if (!inRadius) return;\n\n                const box1 = en1.getComponent(Collidable).box;\n                const box2 = en2.getComponent(Collidable).box;\n\n                if (box1 instanceof CubeHitbox && box2 instanceof CubeHitbox) {\n                    const intersectArea = box1.intersectAABB(box2);\n\n                    if (intersectArea) {\n                        this.resolveAABBCollision(box1, box2, intersectArea);\n                    }\n                }\n            }\n        }\n    }\n\n    private resolveAABBCollision(a: CubeHitbox, b: CubeHitbox, intersectArea: IntersectArea) {\n        const physical1 = a.attached.getComponent(Physical);\n        const physical2 = b.attached.getComponent(Physical);\n        // Calculate direction vector from entity1 to entity2\n        const direction = b.attached.position.clone().subtract(a.attached.position).normalize();\n        \n        // Determine smallest overlap for minimal displacement\n        const deltaX = intersectArea.maxX - intersectArea.minX;\n        const deltaY = intersectArea.maxY - intersectArea.minY;\n        const deltaZ = intersectArea.maxZ - intersectArea.minZ;\n        const minOverlap = Math.min(deltaX, deltaY, deltaZ);\n        \n        // Determine the push distance based on overlap\n        const pushDistance = minOverlap / 2;\n        console.log(pushDistance)\n    \n        // Apply equal push to both entities in opposite directions\n        a.attached.position = a.attached.position.add(direction.multiplyScalar(-pushDistance));\n        b.attached.position = b.attached.position.add(direction.multiplyScalar(pushDistance));\n    }    \n}","import { Entity } from '../Entities/Entity';\nimport { Player } from '../Entities/Player';\nimport { Slime } from '../Entities/Enemies/Slimes/Slime';\nimport { EntityAdded } from '../Event/EntityAdded';\nimport { EntityRemoved } from '../Event/EntityRemoved';\nimport { EventBus } from '../Event/EventBus';\nimport { CameraSystem } from '../Systems/CameraSystem';\nimport { MovementSystem } from '../Systems/MovementSystem';\nimport { RandomMovementSystem } from '../Systems/RandomMovementSystem';\nimport { DrawSystem } from '../Systems/DrawSystem';\nimport { StateSystem } from '../Systems/StateSystem';\nimport { System } from '../Systems/System';\nimport { VelocitySystem } from '../Systems/VelocitySystem';\nimport { HudSystem } from '../Systems/HudSystem';\nimport { DebugSystem } from '../Systems/DebugSystem';\nimport { GravitySystem } from '../Systems/GravitySystem';\nimport { Tile } from '../Entities/Tile';\nimport { Vector3 } from '../Util/Vector3';\nimport { EntityChanged } from '../Event/EntityChanged';\nimport { ChunkSystem } from '../Systems/CunkSystem';\nimport { Collidable, CubeHitbox } from '../Components/Collidable';\nimport { PhysicalCollisionSystem } from '../Systems/PhysicalCollisionSystem';\nimport { TerrainCollisionSystem } from '../Systems/TerrainCollisionSystem';\nimport { World } from './World';\n\nexport class Game {\n    private static readonly TIME_STEP = 1 / 144;\n    private static readonly MAX_UPDATES_PER_FRAME = 10;\n    private static readonly FPS_DECAY = 0.1;\n    private static readonly FPS_CAP = -1; // -1 === uncapped\n\n    public static readonly TILE_SIZE_WIDTH = 64;\n    public static readonly TILE_SIZE_DEPTH = 32;\n    public static readonly TILE_OFFSET = 16;\n\n    private readonly map = [[\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 2, 1, 19, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 9, 8, 7, 3, 18, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 10, 6, 4, 1, 17, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1],\n        [1, 11, 5, 1, 16, 30, 29, 28, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 12, 1, 1, 15, 1, 1, 27, 1, 1, 30, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 14, 1, 1, 26, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 25, 1, 1, 1, 17, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 22, 1, 1, 16, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 16, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1, 12, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    ]];\n    \n    static readonly events = new EventBus();\n    public fps = 1 / Game.TIME_STEP;\n\n    private readonly entities: Entity[] = [\n        new Player(),\n        new Slime()\n    ];\n    \n    private readonly systems: System[] = [\n        // Normal Systems\n        //new RandomMovementSystem(),\n        \n        new MovementSystem(),\n        // new GravitySystem(),\n        new VelocitySystem(),\n\n        new PhysicalCollisionSystem(),\n        // new TerrainCollisionSystem(),\n        \n        // Try to not adjust these\n        new ChunkSystem(),\n        new StateSystem(),\n        new CameraSystem(),\n        new DrawSystem(),\n        new HudSystem(),\n        new DebugSystem(),\n    ];\n    \n    private animationFrameId: number | null = null;\n    private running = false;\n    private lastTimestamp = 0;\n    \n    public height: number = window.innerHeight;\n    public width: number = window.innerWidth;\n    \n    public cameraPosition: Vector3 = new Vector3();\n\n    public constructor(\n        public readonly ctx: CanvasRenderingContext2D,\n        public readonly io: any\n    ) {\n        ctx.canvas.width = this.width;\n        ctx.canvas.height = this.height;\n\n        // Load map\n        for (let y = 0; y < this.map.length; y++){\n            const layer = this.map[y];\n\n            for (let x = 0; x < layer.length; x++){\n                const row = layer[x];\n\n                for (let z = 0; z < row.length; z++){\n                    const tile1 = row[z];\n\n                    this.entities.push(new Tile(\n                      tile1,\n                      new Vector3(x, y, z), // Now we pass x, y, z directly\n                      0\n                    ));\n                }\n            }\n        }\n\n        // for (let x = -100; x < 100; x++) {\n        //     for (let z = -100; z < 100; z++) {\n        //         this.entities.push(new Tile(\n        //             1,\n        //             new Vector3(x, -0.5, z),\n        //             0\n        //         ));\n        //     }\n        // }\n\n        // for (let i = 1; i < 10; i++) {\n        //     this.entities.push(new Tile(\n        //         1,\n        //         new Vector3(0, i, 0),\n        //         0\n        //     ))\n        // }\n\n        const tile = new Tile(\n            10,\n            new Vector3(5, 0.5, 5),\n            0\n        );\n\n        tile.addComponent(new Collidable(new CubeHitbox(tile, 1, 1, 0.5)));\n\n        this.entities.push(tile)\n\n        // for (let i = 0; i < 200; i++) {\n        //     this.entities.push(new Slime(new Vector3(Math.random() * 20, 2, Math.random() * 20)));\n        // }\n\n        window.addEventListener('click', (event) => {\n            const mouseX = event.clientX; // Get the X coordinate of the mouse click\n            const mouseY = event.clientY; // Get the Y coordinate of the mouse click\n        \n            // Convert the screen position to world position\n            const worldPosition = Game.isoTo2D(new Vector3(mouseX, mouseY, 0));\n        \n            console.log(`World Position: ${worldPosition.floor()}`);\n        });\n\n        addEventListener('resize', this.onResize.bind(this));\n    }\n\n    public addSystem(system: System): void {\n        this.systems.push(system);\n        system.initialize(this);\n    }\n\n    public addEntity(entity: Entity): void {\n        this.entities.push(entity);\n        Game.events.emit(new EntityAdded(entity));\n    }\n\n    public removeEntity(entity: Entity): void {\n        const index = this.entities.indexOf(entity);\n\n        if (index >= 0) {\n            this.entities.splice(index, 1);\n            Game.events.emit(new EntityRemoved(entity));\n        }\n    }\n\n    public start(): void {\n        if (!this.running) {\n            this.running = true;\n            \n            this.animationFrameId = requestAnimationFrame(this.update.bind(this));\n\n            for (const system of this.systems) {\n                const filteredEntities = this.entities.filter(system.appliesTo);\n                for (const entity of filteredEntities) {\n                    system.addEntity(entity);\n                }\n            }\n\n            Game.events.register(EntityRemoved, (event: EntityRemoved) => {\n                for (const system of this.systems) {\n                    if (system.appliesTo(event.entity)) {\n                        system.removeEntity(event.entity);\n                        system.filteredEntitiesUpdated(this);\n                    }\n                }\n            });\n\n            Game.events.register(EntityAdded, (event: EntityAdded) => {\n                for (const system of this.systems) {\n                    if (system.appliesTo(event.entity)) {\n                        system.addEntity(event.entity)\n                        system.filteredEntitiesUpdated(this);\n                    }\n                }\n            });\n\n            Game.events.register(EntityChanged, (event: EntityChanged) => {\n                for (const system of this.systems) {\n                    if (system.hasEntity(event.entity) && !system.appliesTo(event.entity)) {\n                        system.removeEntity(event.entity);\n                        system.filteredEntitiesUpdated(this);\n                    }\n\n                    if (!system.hasEntity(event.entity) && system.appliesTo(event.entity)) {\n                        system.addEntity(event.entity);\n                        system.filteredEntitiesUpdated(this);\n                    }\n                }\n            });\n        }\n    }\n\n    public stop(): void {\n        if (this.animationFrameId) {\n            cancelAnimationFrame(this.animationFrameId);\n            this.animationFrameId = null;\n        }\n\n        this.fps = 1 / Game.TIME_STEP;\n        this.lastTimestamp = 0;\n        this.running = false;\n    }\n\n    public update(currentTimestamp: number): void {\n        let dt: number;\n\n        if (this.lastTimestamp === 0) {\n            // First frame, there's no delta time\n            dt = Game.TIME_STEP;\n        } else {\n            dt = (currentTimestamp - this.lastTimestamp) / 1000;\n        }\n\n        this.lastTimestamp = currentTimestamp;\n        this.fps = Game.FPS_DECAY * (1 / dt) + (1 - Game.FPS_DECAY) * this.fps;\n\n        for (const system of this.systems) {\n            system.update(Game.TIME_STEP, this);\n        }\n\n        if (this.running) {\n            this.animationFrameId = requestAnimationFrame(this.update.bind(this));\n        }\n    }\n\n    private onResize(): void {\n        this.height = window.innerHeight;\n        this.width = window.innerWidth;\n\n        this.ctx.canvas.width = this.width;\n        this.ctx.canvas.height = this.height;\n    }\n\n\n    // public static screenPosToWorldPos(position: Vector3): Vector3 {\n    //     const x = (position.x / Game.TILE_SIZE_WIDTH + position.z / Game.TILE_SIZE_DEPTH);\n    //     const z = (position.x / Game.TILE_SIZE_WIDTH - position.z / Game.TILE_SIZE_DEPTH);\n    //     const y = position.y;\n    \n    //     return new Vector3(x, y, z);\n    // }\n\n    public static isoTo2D(vector: Vector3): Vector3{\n        return new Vector3(\n            (2 * vector.z - vector.x) / 2,\n            (2 * vector.z + vector.x) / 2,\n            0\n        );\n    }\n\n    public static worldPosToScreenPos(position: Vector3): Vector3 {\n        return new Vector3(\n            ((position.x * Game.TILE_SIZE_WIDTH / 2) + (position.z * Game.TILE_SIZE_WIDTH / 2)),\n            ((position.x * Game.TILE_SIZE_DEPTH / 2) - (position.z * Game.TILE_SIZE_DEPTH / 2))  - (position.y * Game.TILE_SIZE_DEPTH),\n            0\n        );\n    }\n    \n    // public static worldPosToScreenPos(position: Vector3, offsetX: number = 0, offsetY: number = 0): Vector3 {\n    //     const x = (position.x * Game.TILE_SIZE_WIDTH / 2) + (position.z * Game.TILE_SIZE_WIDTH / 2) + offsetX;\n    //     const y = (position.x * Game.TILE_SIZE_DEPTH / 2) - (position.z * Game.TILE_SIZE_DEPTH / 2) - (position.y * Game.TILE_SIZE_DEPTH) + offsetY;\n\n    //     return new Vector3(x, y, 0);\n    // }\n\n    // public static screenPosToWorldPos(screenPos: Vector3): Vector3 {\n    //     const TILE_WIDTH = Game.TILE_SIZE_WIDTH;   // Width of tile\n    //     const TILE_DEPTH = Game.TILE_SIZE_DEPTH;   // Depth of tile\n\n    //     const x = ((screenPos.x) / (TILE_WIDTH / 2)) - ((screenPos.y) / (TILE_DEPTH / 2));\n    //     const z = ((screenPos.x) / (TILE_WIDTH / 2)) + ((screenPos.y) / (TILE_DEPTH / 2));\n\n    //     const y = (screenPos.y + (TILE_DEPTH / 2)) / TILE_DEPTH; // Adjust y based on depth\n\n    //     return new Vector3(x, y, z);\n    // }\n\n    // public static worldPosToScreenPos(pt:Vector3): Vector3 {\n    //     var tempPt:Vector3 = new Vector3(0, 0, 0);\n    //     tempPt.x = (2 * pt.z + pt.x) / 2;\n    //     tempPt.z = (2 * pt.z - pt.x) / 2;\n    //     return(tempPt);\n    //   }\n\n    //   public static screenPosToWorldPos(pt:Vector3): Vector3 {\n    //     var tempPt:Vector3 = new Vector3(0,0,0);\n    //     tempPt.x = pt.x - pt.z;\n    //     tempPt.z = (pt.x + pt.z) / 2;\n    //     return(tempPt);\n    // }\n\n    // public static isoTo2D(pt: Vector3): Vector3 {\n    //     var tempPt: Vector3 = new Vector3(0, 0, 0);\n    //     tempPt.x = (2 * pt.z + pt.x) / 2;\n    //     tempPt.z = (2 * pt.z - pt.x) / 2;\n    //     return(tempPt);\n    // }\n\n    // public static twoDToIso(pt:Vector3): Vector3 {\n    //     var tempPt: Vector3 = new Vector3(0, 0, 0);\n    //     tempPt.x = pt.x - pt.z;\n    //     tempPt.z = (pt.x + pt.z) / 2;\n    //     return(tempPt);\n    // }\n\n    // public static getTileCoordinates(pt: Vector3): Vector3 {\n    //     var tempPt: Vector3 = new Vector3(0, 0, 0);\n    //     tempPt.x = Math.floor(pt.x / Game.TILE_SIZE_WIDTH);\n    //     tempPt.y = Math.floor(pt.z / Game.TILE_SIZE_DEPTH);\n    //     return(tempPt);\n    // }\n\n    // public static worldPosToScreenPos(pt: Vector3): Vector3 {\n    //     var tempPt: Vector3 = new Vector3(0, 0, 0);\n    //     tempPt.x = Math.floor(pt.x / Game.TILE_SIZE_WIDTH);\n    //     tempPt.y = Math.floor(pt.z / Game.TILE_SIZE_DEPTH);\n    //     return(tempPt);\n    //   }\n    \n\n    // public positionInCamera(position: Vector3): Vector3 {\n        \n    //     return position.subtract(new Vector3(\n    //         this.cameraPosition.x - this.ctx.canvas.width / 2,\n    //         this.cameraPosition.y,\n    //         this.cameraPosition.z - this.ctx.canvas.width / 2\n    //     ));\n    // }\n}\n","import './index.scss';\nimport { Game } from './src/Game/Game';\n\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement;\nconst ctx = canvas.getContext('2d')!;\n\nconst game = new Game(ctx, \"\");\n\ngame.start();\n"]}